[tox]
isolated_build = true
skipdist = false
envlist =
    py312
    style
    typing

[gh-actions]
python =
    3.12: py312

[testenv]
passenv = *
deps =
    pytest
    pytest-cov
    pytest-dotenv
    pytest-asyncio
    eth-ape
commands =
    pytest --cov --cov-report xml

[testenv:py312]
basepython = python3.12
deps =
    pytest
    pytest-cov
    pytest-dotenv
    pytest-asyncio
    eth-ape
allowlist_externals = 
    npx
    pkill
    sleep
    bash
    curl
setenv =
    CI = true
commands_pre =
    ; Kill any existing hardhat processes
    - pkill -f "hardhat node"
    ; Start hardhat node in background and wait for it to be ready
    bash -c "npx hardhat node --hostname 127.0.0.1 --port 8545 > /tmp/hardhat.log 2>&1 & echo $! > /tmp/hardhat.pid"
    ; Wait for hardhat to start up
    sleep 5
    ; Health check - verify hardhat node is responding
    bash -c "timeout=30; while [ $timeout -gt 0 ]; do if curl -s -f http://127.0.0.1:8545 > /dev/null 2>&1; then echo 'Hardhat node is ready'; break; else echo 'Waiting for hardhat... ($timeout seconds left)'; sleep 1; timeout=$((timeout-1)); fi; done; if [ $timeout -eq 0 ]; then echo 'Hardhat failed to start'; exit 1; fi"
commands =
    ape plugins install . --upgrade --yes
    ape compile
    pytest --cov --cov-report xml
commands_post =
    ; Clean up hardhat node after tests
    - bash -c "if [ -f /tmp/hardhat.pid ]; then kill $(cat /tmp/hardhat.pid); rm /tmp/hardhat.pid; fi"
    - pkill -f "hardhat node"

[testenv:style]
deps = pre-commit
skip_install = true
commands = pre-commit run --all-files

[testenv:typing]
deps =
    mypy
    mypy-extensions
    types-requests
    types-PyYAML
commands = mypy --strict src --implicit-reexport --ignore-missing-imports --disable-error-code misc

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
basepython = python3.12
deps =
    mkdocs-material
    mkdocstrings[python]

commands =
    mkdocs build -v
